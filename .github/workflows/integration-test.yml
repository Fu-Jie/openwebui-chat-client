name: Integration Test

on:
  workflow_run:
    workflows: ["Test"]
    types:
      - completed
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      base_url:
        description: 'OpenWebUI Base URL'
        required: true
        default: 'https://your-openwebui-instance.com'
      auth_token:
        description: 'OpenWebUI Auth Token'
        required: true
      default_model:
        description: 'Default Model ID'
        required: true
        default: 'gpt-3.5-turbo'
      parallel_models:
        description: 'Parallel Models (comma-separated)'
        required: false
        default: 'gpt-3.5-turbo,gpt-4'

jobs:
  integration-test:
    runs-on: ubuntu-latest
    # Only run if the test workflow succeeded
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        # Install optional dependencies for full demo functionality
        pip install pillow python-dotenv || echo "Optional dependencies failed to install"

    - name: Check Environment Variables
      env:
        OUI_BASE_URL: ${{ github.event.inputs.base_url || secrets.OUI_BASE_URL }}
        OUI_AUTH_TOKEN: ${{ github.event.inputs.auth_token || secrets.OUI_AUTH_TOKEN }}
        OUI_DEFAULT_MODEL: ${{ github.event.inputs.default_model || secrets.OUI_DEFAULT_MODEL }}
        OUI_PARALLEL_MODELS: ${{ github.event.inputs.parallel_models || secrets.OUI_PARALLEL_MODELS }}
      run: |
        echo "Checking integration test environment..."
        echo "Base URL: ${OUI_BASE_URL:-'not set'}"
        echo "Auth Token: ${OUI_AUTH_TOKEN:+'set':-'not set'}"
        echo "Default Model: ${OUI_DEFAULT_MODEL:-'not set'}"
        echo "Parallel Models: ${OUI_PARALLEL_MODELS:-'not set'}"
        
        if [ -z "$OUI_BASE_URL" ] || [ -z "$OUI_AUTH_TOKEN" ] || [ -z "$OUI_DEFAULT_MODEL" ]; then
          echo "‚ùå Missing required environment variables for integration testing."
          echo ""
          echo "To run integration tests, set these as repository secrets or use workflow_dispatch:"
          echo "  - OUI_BASE_URL: Your OpenWebUI instance URL"
          echo "  - OUI_AUTH_TOKEN: Your API authentication token"
          echo "  - OUI_DEFAULT_MODEL: A valid model ID in your instance"
          echo "  - OUI_PARALLEL_MODELS: Comma-separated list of models for parallel testing (optional)"
          echo ""
          echo "Skipping integration tests."
          exit 0
        fi
        
        echo "‚úÖ All required environment variables are set."

    - name: Run Notes API Integration Test
      env:
        OUI_BASE_URL: ${{ github.event.inputs.base_url || secrets.OUI_BASE_URL }}
        OUI_AUTH_TOKEN: ${{ github.event.inputs.auth_token || secrets.OUI_AUTH_TOKEN }}
        OUI_DEFAULT_MODEL: ${{ github.event.inputs.default_model || secrets.OUI_DEFAULT_MODEL }}
        OUI_PARALLEL_MODELS: ${{ github.event.inputs.parallel_models || secrets.OUI_PARALLEL_MODELS }}
      run: |
        echo "üß™ Running Notes API integration test..."
        python examples/notes_api/basic_notes.py

    - name: Run Basic Usage Integration Test
      env:
        OUI_BASE_URL: ${{ github.event.inputs.base_url || secrets.OUI_BASE_URL }}
        OUI_AUTH_TOKEN: ${{ github.event.inputs.auth_token || secrets.OUI_AUTH_TOKEN }}
        OUI_DEFAULT_MODEL: ${{ github.event.inputs.default_model || secrets.OUI_DEFAULT_MODEL }}
        OUI_PARALLEL_MODELS: ${{ github.event.inputs.parallel_models || secrets.OUI_PARALLEL_MODELS }}
      run: |
        echo "üß™ Running basic usage integration test..."
        python examples/getting_started/basic_chat.py

    - name: Run RAG Integration Test
      env:
        OUI_BASE_URL: ${{ github.event.inputs.base_url || secrets.OUI_BASE_URL }}
        OUI_AUTH_TOKEN: ${{ github.event.inputs.auth_token || secrets.OUI_AUTH_TOKEN }}
        OUI_DEFAULT_MODEL: ${{ github.event.inputs.default_model || secrets.OUI_DEFAULT_MODEL }}
        OUI_PARALLEL_MODELS: ${{ github.event.inputs.parallel_models || secrets.OUI_PARALLEL_MODELS }}
        OUI_RAG_MODEL: ${{ github.event.inputs.default_model || secrets.OUI_DEFAULT_MODEL }}
      run: |
        echo "üß™ Running RAG integration test..."
        python examples/rag_knowledge/file_rag.py

    - name: Run Model Management Integration Test
      env:
        OUI_BASE_URL: ${{ github.event.inputs.base_url || secrets.OUI_BASE_URL }}
        OUI_AUTH_TOKEN: ${{ github.event.inputs.auth_token || secrets.OUI_AUTH_TOKEN }}
        OUI_DEFAULT_MODEL: ${{ github.event.inputs.default_model || secrets.OUI_DEFAULT_MODEL }}
        OUI_PARALLEL_MODELS: ${{ github.event.inputs.parallel_models || secrets.OUI_PARALLEL_MODELS }}
      run: |
        echo "üß™ Running model management integration test..."
        python examples/model_management/model_operations.py

    - name: Run Model Switch Integration Test
      env:
        OUI_BASE_URL: ${{ github.event.inputs.base_url || secrets.OUI_BASE_URL }}
        OUI_AUTH_TOKEN: ${{ github.event.inputs.auth_token || secrets.OUI_AUTH_TOKEN }}
        OUI_DEFAULT_MODEL: ${{ github.event.inputs.default_model || secrets.OUI_DEFAULT_MODEL }}
        OUI_PARALLEL_MODELS: ${{ github.event.inputs.parallel_models || secrets.OUI_PARALLEL_MODELS }}
      run: |
        echo "üß™ Running model switch integration test..."
        python examples/chat_features/model_switching.py

    - name: Run Comprehensive Demos Test
      env:
        OUI_BASE_URL: ${{ github.event.inputs.base_url || secrets.OUI_BASE_URL }}
        OUI_AUTH_TOKEN: ${{ github.event.inputs.auth_token || secrets.OUI_AUTH_TOKEN }}
        OUI_DEFAULT_MODEL: ${{ github.event.inputs.default_model || secrets.OUI_DEFAULT_MODEL }}
        OUI_PARALLEL_MODELS: ${{ github.event.inputs.parallel_models || secrets.OUI_PARALLEL_MODELS }}
        OUI_MULTIMODAL_MODEL: ${{ github.event.inputs.default_model || secrets.OUI_DEFAULT_MODEL }}
        OUI_RAG_MODEL: ${{ github.event.inputs.default_model || secrets.OUI_DEFAULT_MODEL }}
      run: |
        echo "üß™ Running comprehensive demos integration test..."
        # Run the quick start demo which showcases multiple features
        python examples/getting_started/quick_start.py

    - name: Basic Connectivity Test
      env:
        OUI_BASE_URL: ${{ github.event.inputs.base_url || secrets.OUI_BASE_URL }}
        OUI_AUTH_TOKEN: ${{ github.event.inputs.auth_token || secrets.OUI_AUTH_TOKEN }}
        OUI_DEFAULT_MODEL: ${{ github.event.inputs.default_model || secrets.OUI_DEFAULT_MODEL }}
      run: |
        echo "üß™ Running basic connectivity test..."
        python -c "
        from openwebui_chat_client import OpenWebUIClient
        import os
        import sys
        
        try:
            client = OpenWebUIClient(
                base_url=os.getenv('OUI_BASE_URL'),
                token=os.getenv('OUI_AUTH_TOKEN'),
                default_model_id=os.getenv('OUI_DEFAULT_MODEL')
            )
            
            # Test basic connectivity by listing models
            models = client.list_models()
            if models:
                print(f'‚úÖ Successfully connected to OpenWebUI. Found {len(models)} models.')
                model_names = [m.get('name', m.get('id', 'Unknown')) for m in models[:3]]
                print(f'   Sample models: {model_names}...' if len(models) > 3 else f'   Available models: {model_names}')
            else:
                print('‚ö†Ô∏è  Connected but no models found.')
            
            print('‚úÖ Basic connectivity test passed!')
            
        except Exception as e:
            print(f'‚ùå Basic connectivity test failed: {e}')
            sys.exit(1)
        "

    - name: Integration Test Summary
      run: |
        echo "üéâ All integration tests completed successfully!"
        echo ""
        echo "Tests completed:"
        echo "  ‚úÖ Notes API functionality"
        echo "  ‚úÖ Basic chat usage"
        echo "  ‚úÖ RAG (Retrieval Augmented Generation) with files"
        echo "  ‚úÖ Model management operations"
        echo "  ‚úÖ Model switching functionality"
        echo "  ‚úÖ Comprehensive quick start demo"
        echo "  ‚úÖ Basic connectivity and authentication"
        echo ""
        echo "All example scripts executed successfully against real OpenWebUI instance!"