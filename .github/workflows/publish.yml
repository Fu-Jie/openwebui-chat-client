name: Tag and Publish on CHANGELOG update

on:
  push:
    branches:
      - main
    paths:
      - 'CHANGELOG.md'

jobs:
  create_tag:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      tag: ${{ steps.get_version.outputs.tag }}
      created: ${{ steps.tag_creation.outputs.created }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version from CHANGELOG.md
        id: get_version
        run: |
          VERSION=$(grep -m 1 '^## \[' CHANGELOG.md | sed -n 's/^## \[\(.*\)\].*/\1/p')
          if [ -z "$VERSION" ]; then
            echo "Could not extract version from CHANGELOG.md"
            exit 1
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT

      - name: Check tag and create if it does not exist
        id: tag_creation
        run: |
          TAG=${{ steps.get_version.outputs.tag }}
          echo "Checking for tag $TAG..."
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists. No new tag will be created."
            echo "created=false" >> $GITHUB_OUTPUT
          else
            echo "Tag $TAG does not exist. Creating and pushing tag..."
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git tag "$TAG" -m "Release $TAG"
            git push origin "$TAG"
            echo "Tag $TAG pushed successfully."
            echo "created=true" >> $GITHUB_OUTPUT
          fi

  test:
    runs-on: ubuntu-latest
    needs: create_tag
    if: needs.create_tag.outputs.created == 'true'
    steps:
    - name: Checkout code at new tag
      uses: actions/checkout@v4
      with:
        ref: ${{ needs.create_tag.outputs.tag }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .

    - name: Run tests
      run: |
        python -m unittest discover -s tests -p "test_*.py" -v

  build-and-publish:
    runs-on: ubuntu-latest
    needs: [create_tag, test]
    if: needs.create_tag.outputs.created == 'true'
    steps:
    - name: Checkout code at new tag
      uses: actions/checkout@v4
      with:
        ref: ${{ needs.create_tag.outputs.tag }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: python -m build

    - name: Check build
      run: twine check dist/*

    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: twine upload dist/*

  create-github-release:
    runs-on: ubuntu-latest
    needs: [create_tag, build-and-publish]
    if: needs.create_tag.outputs.created == 'true'
    permissions:
      contents: write
    steps:
    - name: Checkout code at new tag
      uses: actions/checkout@v4
      with:
        ref: ${{ needs.create_tag.outputs.tag }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Extract changelog content
      id: changelog
      run: |
        python .github/scripts/extract_changelog.py --output release_notes.md
        echo "Changelog extracted successfully"

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.create_tag.outputs.tag }}
        name: Release ${{ needs.create_tag.outputs.tag }}
        body_path: release_notes.md
        draft: false
        prerelease: false
        generate_release_notes: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
