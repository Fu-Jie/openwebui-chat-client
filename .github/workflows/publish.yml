name: Tag and Publish on CHANGELOG update

on:
  push:
    branches:
      - main
    paths:
      - 'CHANGELOG.md'

jobs:
  create_tag:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      tag: ${{ steps.get_version.outputs.tag }}
      created: ${{ steps.tag_creation.outputs.created }}
      should_release: ${{ steps.get_version.outputs.should_release }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version from CHANGELOG.md
        id: get_version
        run: |
          VERSION=$(grep -m 1 '^## \[' CHANGELOG.md | sed -n 's/^## \[\(.*\)\].*/\1/p')
          if [ -z "$VERSION" ]; then
            echo "Could not extract version from CHANGELOG.md"
            exit 1
          fi
          
          # Check if this is an "Unreleased" entry
          if [ "$VERSION" = "Unreleased" ] || [ "$VERSION" = "Êú™ÂèëÂ∏É" ]; then
            echo "üö´ Found Unreleased section in CHANGELOG.md"
            echo "This indicates development changes, not a release."
            echo "To trigger a release, convert [Unreleased] to [X.Y.Z] with proper version number."
            echo "should_release=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Validate version format (X.Y.Z)
          if ! echo "$VERSION" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$'; then
            echo "‚ùå Invalid version format: $VERSION"
            echo "Version must follow semantic versioning (e.g., 1.2.3 or 1.2.3-beta.1)"
            exit 1
          fi
          
          echo "‚úÖ Valid release version found: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT
          echo "should_release=true" >> $GITHUB_OUTPUT

      - name: Check tag and create if it does not exist
        id: tag_creation
        run: |
          # Skip if this is not a release version
          if [ "${{ steps.get_version.outputs.should_release }}" != "true" ]; then
            echo "‚è≠Ô∏è  Skipping tag creation - not a release version"
            echo "created=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          TAG=${{ steps.get_version.outputs.tag }}
          echo "Checking for tag $TAG..."
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists. No new tag will be created."
            echo "created=false" >> $GITHUB_OUTPUT
          else
            echo "Tag $TAG does not exist. Creating and pushing tag..."
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git tag "$TAG" -m "Release $TAG"
            git push origin "$TAG"
            echo "Tag $TAG pushed successfully."
            echo "created=true" >> $GITHUB_OUTPUT
          fi

  detect-test-scope:
    runs-on: ubuntu-latest
    needs: create_tag
    if: needs.create_tag.outputs.created == 'true'
    outputs:
      should-run-tests: ${{ steps.detect.outputs.should-run }}
      test-patterns: ${{ steps.detect.outputs.patterns }}
      integration-tests: ${{ steps.detect.outputs.integration-tests }}
    
    steps:
    - name: Checkout code at new tag
      uses: actions/checkout@v4
      with:
        ref: ${{ needs.create_tag.outputs.tag }}
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies for detection
      run: |
        python -m pip install --upgrade pip
        pip install PyYAML

    - name: Detect test scope for release
      id: detect
      run: |
        echo "üîç Detecting tests needed for release ${{ needs.create_tag.outputs.tag }}"
        
        # Get all changes since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 ${{ needs.create_tag.outputs.tag }}^ 2>/dev/null || echo "")
        
        if [ -z "$LAST_TAG" ]; then
          echo "No previous tag found, this is the first release"
          echo "Running all tests for first release"
          echo "should-run=true" >> $GITHUB_OUTPUT
          echo "patterns=test_*.py" >> $GITHUB_OUTPUT
          echo "integration-tests=[\"connectivity\",\"basic_chat\",\"notes_api\",\"prompts_api\",\"rag_integration\",\"model_management\",\"model_switching\",\"comprehensive_demos\",\"continuous_conversation\",\"deep_research\"]" >> $GITHUB_OUTPUT
        else
          echo "Comparing changes from $LAST_TAG to ${{ needs.create_tag.outputs.tag }}"
          
          # Detect unit tests
          python .github/scripts/detect_unit_tests.py "$LAST_TAG" "${{ needs.create_tag.outputs.tag }}"
          
          if [ -f /tmp/test-detection.json ]; then
            SHOULD_RUN=$(jq -r '.should_run' /tmp/test-detection.json)
            PATTERNS=$(jq -r '.patterns' /tmp/test-detection.json)
            
            echo "should-run=$SHOULD_RUN" >> $GITHUB_OUTPUT
            echo "patterns=$PATTERNS" >> $GITHUB_OUTPUT
            
            echo "Unit tests - Should run: $SHOULD_RUN"
            echo "Unit tests - Patterns: $PATTERNS"
          else
            echo "should-run=true" >> $GITHUB_OUTPUT
            echo "patterns=test_*.py" >> $GITHUB_OUTPUT
          fi
          
          # Detect integration tests
          INTEGRATION_TESTS=$(python .github/scripts/detect_required_tests.py "$LAST_TAG" "${{ needs.create_tag.outputs.tag }}")
          echo "integration-tests=$INTEGRATION_TESTS" >> $GITHUB_OUTPUT
          echo "Integration tests: $INTEGRATION_TESTS"
        fi

  test:
    runs-on: ubuntu-latest
    needs: [create_tag, detect-test-scope]
    if: needs.create_tag.outputs.created == 'true' && needs.detect-test-scope.outputs.should-run-tests == 'true'
    steps:
    - name: Checkout code at new tag
      uses: actions/checkout@v4
      with:
        ref: ${{ needs.create_tag.outputs.tag }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .

    - name: Run selected unit tests
      run: |
        TEST_PATTERN="${{ needs.detect-test-scope.outputs.test-patterns }}"
        echo "üß™ Running unit tests matching pattern: $TEST_PATTERN"
        python -m unittest discover -s tests -p "$TEST_PATTERN" -v

  integration-test:
    runs-on: ubuntu-latest
    needs: [create_tag, detect-test-scope, test]
    if: needs.create_tag.outputs.created == 'true' && needs.detect-test-scope.outputs.integration-tests != '[]'
    strategy:
      matrix:
        test-category: ${{ fromJson(needs.detect-test-scope.outputs.integration-tests) }}
      fail-fast: false
    
    steps:
    - name: Checkout code at new tag
      uses: actions/checkout@v4
      with:
        ref: ${{ needs.create_tag.outputs.tag }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pillow python-dotenv PyYAML || echo "Optional dependencies failed"

    - name: Check Environment Variables
      env:
        OUI_BASE_URL: ${{ secrets.OUI_BASE_URL }}
        OUI_AUTH_TOKEN: ${{ secrets.OUI_AUTH_TOKEN }}
        OUI_DEFAULT_MODEL: ${{ secrets.OUI_DEFAULT_MODEL || 'gpt-4.1' }}
      run: |
        echo "üß™ Checking environment for integration test: ${{ matrix.test-category }}"
        
        if [ -z "$OUI_BASE_URL" ] || [ -z "$OUI_AUTH_TOKEN" ]; then
          echo "‚ö†Ô∏è  Integration test secrets not configured, skipping"
          exit 0
        fi
        
        echo "‚úÖ Environment configured for integration tests"

    - name: Run Selected Integration Test
      env:
        OUI_BASE_URL: ${{ secrets.OUI_BASE_URL }}
        OUI_AUTH_TOKEN: ${{ secrets.OUI_AUTH_TOKEN }}
        OUI_DEFAULT_MODEL: ${{ secrets.OUI_DEFAULT_MODEL || 'gpt-4.1' }}
        OUI_PARALLEL_MODELS: ${{ secrets.OUI_PARALLEL_MODELS || 'gpt-4.1,gpt-4o' }}
        OUI_MULTIMODAL_MODEL: ${{ secrets.OUI_DEFAULT_MODEL || 'gpt-4.1' }}
        OUI_RAG_MODEL: ${{ secrets.OUI_DEFAULT_MODEL || 'gpt-4.1' }}
      run: |
        if [ -z "$OUI_BASE_URL" ] || [ -z "$OUI_AUTH_TOKEN" ]; then
          echo "Skipping integration test (no credentials)"
          exit 0
        fi
        
        echo "üß™ Running integration test for category: ${{ matrix.test-category }}"
        python .github/scripts/run_all_integration_tests.py --category ${{ matrix.test-category }} --verbose

  skip-release-notification:
    runs-on: ubuntu-latest
    needs: create_tag
    if: needs.create_tag.outputs.should_release == 'false'
    steps:
    - name: Notify Skip Release
      run: |
        echo "üîÑ CHANGELOG update detected but not triggering release"
        echo ""
        echo "The CHANGELOG.md was updated with [Unreleased] changes."
        echo "This follows the established changelog management workflow:"
        echo ""
        echo "üìã Current State: Development changes documented in [Unreleased] section"
        echo "üöÄ To Release: Convert [Unreleased] to [X.Y.Z] with proper version number"
        echo ""
        echo "The publish workflow will trigger automatically when:"
        echo "1. [Unreleased] is changed to a proper semantic version (e.g., [0.1.14])"
        echo "2. The version follows the format: X.Y.Z or X.Y.Z-suffix"
        echo ""
        echo "‚úÖ No action needed - this is expected behavior for development changes."

  build-and-publish:
    runs-on: ubuntu-latest
    needs: [create_tag, test]
    if: needs.create_tag.outputs.created == 'true'
    steps:
    - name: Checkout code at new tag
      uses: actions/checkout@v4
      with:
        ref: ${{ needs.create_tag.outputs.tag }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: python -m build

    - name: Check build
      run: twine check dist/*

    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: twine upload dist/*

  create-github-release:
    runs-on: ubuntu-latest
    needs: [create_tag, build-and-publish]
    if: needs.create_tag.outputs.created == 'true'
    permissions:
      contents: write
    steps:
    - name: Checkout code at new tag
      uses: actions/checkout@v4
      with:
        ref: ${{ needs.create_tag.outputs.tag }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Extract changelog content
      id: changelog
      run: |
        python .github/scripts/extract_changelog.py --output release_notes.md
        echo "Changelog extracted successfully"

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.create_tag.outputs.tag }}
        name: Release ${{ needs.create_tag.outputs.tag }}
        body_path: release_notes.md
        draft: false
        prerelease: false
        generate_release_notes: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
